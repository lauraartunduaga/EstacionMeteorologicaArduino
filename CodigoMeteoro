#include <WiFi.h>
#include <DHT.h>
#include <TinyGPS++.h>
#include <HardwareSerial.h>
#include <Wire.h>
#include <RTClib.h>

// Configuraci√≥n de pines
#define DHTPIN 4
#define DHTTYPE DHT11
#define GPS_RX 16
#define GPS_TX 17

// Objetos
DHT dht(DHTPIN, DHTTYPE);
TinyGPSPlus gps;
HardwareSerial gpsSerial(1);
RTC_DS1307 rtc;

// Configuraci√≥n WiFi
const char* ssid = "TP-LINK_DDAE";
const char* password = "24890717";
WiFiServer server(80);

// Variables del sistema
bool sistemaActivo = false;
float temperatura = 0;
float humedad = 0;
double latitud = 0;
double longitud = 0;
double altitud = 0;
DateTime ahora;

// Buffer para datos JSON
String jsonData;

void setup() {
  Serial.begin(115200);
  
  // Inicializar sensores
  initSensores();
  
  // Conectar WiFi
  connectWiFi();
  
  server.begin();
  Serial.println("Servidor HTTP iniciado");
}

void loop() {
  WiFiClient client = server.available();
  
  if (client) {
    Serial.println("[Cliente conectado]");
    String request = client.readStringUntil('\r');
    client.flush();
    
    handleRequest(request);
    
    if (sistemaActivo) {
      leerSensores();
      buildJsonData();
    }
    
    ahora = rtc.now();
    
    // Determinar qu√© tipo de respuesta enviar
    if (request.indexOf("/data") != -1) {
      sendJsonResponse(client);
    } else {
      sendHtmlPage(client);
    }
    
    client.stop();
    Serial.println("[Cliente desconectado]");
  }
}

void initSensores() {
  gpsSerial.begin(9600, SERIAL_8N1, GPS_RX, GPS_TX);
  dht.begin();
  Wire.begin(21, 22); // SDA y SCL
  
  if (!rtc.begin()) {
    Serial.println("RTC no encontrado. Continuando sin reloj...");
  } else if (!rtc.isrunning()) {
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
  }
}

void connectWiFi() {
  Serial.print("Conectando a WiFi");
  WiFi.begin(ssid, password);
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  
  Serial.println("\nWiFi conectado.");
  Serial.print("IP: ");
  Serial.println(WiFi.localIP());
}

void handleRequest(String request) {
  if (request.indexOf("/activar") != -1) {
    sistemaActivo = true;
    Serial.println("Sistema ACTIVADO");
  } else if (request.indexOf("/desactivar") != -1) {
    sistemaActivo = false;
    Serial.println("Sistema DESACTIVADO");
  }
}

void leerSensores() {
  // Leer DHT
  float newTemp = dht.readTemperature();
  float newHum = dht.readHumidity();
  
  if (!isnan(newTemp)) temperatura = newTemp;
  if (!isnan(newHum)) humedad = newHum;
  
  // Leer GPS
  while (gpsSerial.available()) {
    char c = gpsSerial.read();
    gps.encode(c);
  }
  
  if (gps.location.isValid()) {
    latitud = gps.location.lat();
    longitud = gps.location.lng();
  }
  
  if (gps.altitude.isValid()) {
    altitud = gps.altitude.meters();
  }
}

void buildJsonData() {
  jsonData = "{";
  jsonData += "\"temperatura\":" + String(temperatura, 1) + ",";
  jsonData += "\"humedad\":" + String(humedal, 1) + ",";
  jsonData += "\"latitud\":" + String(latitud, 6) + ",";
  jsonData += "\"longitud\":" + String(longitud, 6) + ",";
  jsonData += "\"altitud\":" + String(altitud, 2) + ",";
  jsonData += "\"hora\":\"" + formatTime(ahora) + "\",";
  jsonData += "\"estado\":" + String(sistemaActivo ? "true" : "false");
  jsonData += "}";
}

String formatTime(DateTime t) {
  char buf[9];
  sprintf(buf, "%02d:%02d:%02d", t.hour(), t.minute(), t.second());
  return String(buf);
}

void sendHtmlPage(WiFiClient client) {
  client.println("HTTP/1.1 200 OK");
  client.println("Content-Type: text/html");
  client.println("Connection: close");
  client.println();
  
  // P√°gina HTML con Bootstrap y Chart.js
  client.println("<!DOCTYPE html><html><head>");
  client.println("<meta charset='UTF-8'>");
  client.println("<meta name='viewport' content='width=device-width, initial-scale=1'>");
  client.println("<title>Estaci√≥n Meteorol√≥gica</title>");
  client.println("<link href='https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css' rel='stylesheet'>");
  client.println("<script src='https://cdn.jsdelivr.net/npm/chart.js'></script>");
  client.println("<style>");
  client.println(".card { margin-bottom: 20px; }");
  client.println(".status { font-weight: bold; }");
  client.println(".status.active { color: green; }");
  client.println(".status.inactive { color: red; }");
  client.println("</style>");
  client.println("</head><body class='bg-light'>");
  client.println("<div class='container py-4'>");
  client.println("<h1 class='text-center mb-4'>Estaci√≥n Meteorol√≥gica</h1>");
  
  // Tarjeta de estado
  client.println("<div class='card'>");
  client.println("<div class='card-body'>");
  client.println("<h5 class='card-title'>Estado del Sistema</h5>");
  client.printf("<p class='status %s'>%s</p>", 
               sistemaActivo ? "active" : "inactive",
               sistemaActivo ? "üü¢ ACTIVADO" : "üî¥ DESACTIVADO");
  client.println("<div class='btn-group'>");
  client.println("<form action='/activar' method='GET'><button class='btn btn-success'>Activar</button></form>");
  client.println("<form action='/desactivar' method='GET'><button class='btn btn-danger'>Desactivar</button></form>");
  client.println("</div>");
  client.printf("<p class='mt-2'>‚è∞ Hora actual: %s</p>", formatTime(ahora).c_str());
  client.println("</div></div>");
  
  // Tarjeta de datos
  client.println("<div class='card'>");
  client.println("<div class='card-body'>");
  client.println("<h5 class='card-title'>Datos de Sensores</h5>");
  client.println("<div id='sensorData'>");
  if (sistemaActivo) {
    client.println("<p>üå°Ô∏è Temperatura: <span id='temp'>" + String(temperatura, 1) + "</span> ¬∞C</p>");
    client.println("<p>üíß Humedad: <span id='hum'>" + String(humedad, 1) + "</span> %</p>");
    if (gps.location.isValid()) {
      client.println("<p>üìç Ubicaci√≥n: <span id='lat'>" + String(latitud, 6) + "</span>, <span id='lng'>" + String(longitud, 6) + "</span></p>");
    } else {
      client.println("<p>üìç Ubicaci√≥n: <em>No disponible</em></p>");
    }
    client.println("<p>üóª Altitud: <span id='alt'>" + String(altitud, 2) + "</span> m</p>");
  } else {
    client.println("<p class='text-muted'>Sistema desactivado. Active el sistema para ver datos.</p>");
  }
  client.println("</div></div></div>");
  
  // Gr√°ficos
  client.println("<div class='card'>");
  client.println("<div class='card-body'>");
  client.println("<h5 class='card-title'>Gr√°ficos</h5>");
  client.println("<canvas id='tempChart'></canvas>");
  client.println("<canvas id='humChart' class='mt-4'></canvas>");
  client.println("</div></div>");
  
  // Script para actualizaci√≥n autom√°tica
  client.println("<script>");
  client.println("const tempCtx = document.getElementById('tempChart').getContext('2d');");
  client.println("const humCtx = document.getElementById('humChart').getContext('2d');");
  client.println("let tempChart = new Chart(tempCtx, {");
  client.println("type: 'line', data: { labels: [], datasets: [{ label: 'Temperatura (¬∞C)', data: [] }] } });");
  client.println("let humChart = new Chart(humCtx, {");
  client.println("type: 'line', data: { labels: [], datasets: [{ label: 'Humedad (%)', data: [] }] } });");
  
  client.println("function updateData() {");
  client.println("fetch('/data')");
  client.println(".then(response => response.json())");
  client.println(".then(data => {");
  client.println("if (data.estado) {");
  client.println("document.getElementById('temp').textContent = data.temperatura.toFixed(1);");
  client.println("document.getElementById('hum').textContent = data.humedad.toFixed(1);");
  client.println("if (data.latitud) document.getElementById('lat').textContent = data.latitud.toFixed(6);");
  client.println("if (data.longitud) document.getElementById('lng').textContent = data.longitud.toFixed(6);");
  client.println("document.getElementById('alt').textContent = data.altitud.toFixed(2);");
  
  // Actualizar gr√°ficos
  client.println("const now = new Date().toLocaleTimeString();");
  client.println("if (tempChart.data.labels.length > 10) {");
  client.println("tempChart.data.labels.shift(); humChart.data.labels.shift();");
  client.println("tempChart.data.datasets[0].data.shift(); humChart.data.datasets[0].data.shift();");
  client.println("}");
  client.println("tempChart.data.labels.push(now);");
  client.println("humChart.data.labels.push(now);");
  client.println("tempChart.data.datasets[0].data.push(data.temperatura);");
  client.println("humChart.data.datasets[0].data.push(data.humedad);");
  client.println("tempChart.update(); humChart.update();");
  client.println("}});}");
  
  client.println("setInterval(updateData, 1000);"); // Actualizar cada segundo
  client.println("updateData();"); // Ejecutar inmediatamente
  client.println("</script>");
  
  client.println("</div></body></html>");
}

void sendJsonResponse(WiFiClient client) {
  client.println("HTTP/1.1 200 OK");
  client.println("Content-Type: application/json");
  client.println("Connection: close");
  client.println();
  client.println(jsonData);
}
